<#include "/macro.include"/>
<#assign className = table.className>
<#assign classNameFirstLower = table.classNameFirstLower>
<#assign utilpackage=""> 
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<#macro mapperEl value>${r"#{"}${value}}</#macro>
<#macro namespace></#macro>

<mapper namespace="${basepackage}.model.${className}">
	<!-- open cache -->
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>

	<resultMap id="${basepackage}.${className}.RM" type="${basepackage}.model.${className}">
        <#list table.columns as column>
        <result property="${column.columnNameLower}" column="${column.sqlName}"/>
		</#list>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="<@namespace/>columns">
	    <![CDATA[
		<#list table.columns as column>${column.sqlName}<#if column_has_next>,</#if></#list>
	    ]]>
	</sql>
	
	<sql id="where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用Ognl.isNotEmpty()方法,具体请查看Ognl类 -->
		<where>	      				
			<#list table.columns as column>
			<#if column.isDateTimeColumn>
			<if test="@${utilpackage}.Ognl@isNotEmpty(${column.columnNameFirstLower}Begin)">
				AND ${column.sqlName} >= <@mapperEl column.columnNameFirstLower+"Begin"/>
			</if>
			<if test="@${utilpackage}.Ognl@isNotEmpty(${column.columnNameFirstLower}End)">
				AND ${column.sqlName} &lt;= <@mapperEl column.columnNameFirstLower+"End"/>
			</if>
			<#else>
			<if test="@${utilpackage}.Ognl@isNotEmpty(${column.columnNameFirstLower})">
				<if test="@${utilpackage}.Ognl@isNotEmpty(conditions.${column.columnNameFirstLower})">${r"${conditions."}${column.columnNameFirstLower}${r".condition}"}</if> ${column.sqlName} <if test="@${utilpackage}.Ognl@isNotEmpty(conditions.${column.columnNameFirstLower})">${r"${conditions."}${column.columnNameFirstLower}${r".compare.value}"}</if> <@mapperEl column.columnNameFirstLower/>
			</if>
			</#if>
			</#list>			
		</where>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="<@namespace/>insert" useGeneratedKeys="true" keyProperty="${table.idColumn.columnNameFirstLower}">
    <![CDATA[
        INSERT INTO ${table.sqlName} (
        <#list table.columns as column>
        	${column.sqlName} <#if column_has_next>,</#if>
        </#list>
        ) VALUES (
        <#list table.columns as column>
        	<@mapperEl column.columnNameFirstLower/> <#if column_has_next>,</#if>
        </#list>        
        )
    ]]>
   		<#list table.columns as column>
	    	<#if column.pk>
	    	<selectKey resultType="${column.javaType}" order="BEFORE" keyProperty="${column.columnNameLower}">
				${GenPk_MySql}
	        </selectKey>
	        </#if>
        </#list>
		<#--
		<#list table.columns as column>
	    	<#if column.pk>
	    	<selectKey resultType="${column.javaType}" order="BEFORE" keyProperty="${column.columnNameLower}">
				${GenPk_MySql}
	        </selectKey>
	        </#if>
        </#list>
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT SEQ_${column.sqlName}.NEXTVAL AS ID FROM DUAL 
        </selectKey>
	        oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" VALUES NEXTVAL FOR SEQ_${column.sqlName}
		-->
	</insert>
    
	<update id="<@namespace/>update" >
    <![CDATA[
        UPDATE ${table.sqlName} SET
	        <#list table.notPkColumns as column>
	        ${column.sqlName} = <@mapperEl column.columnNameFirstLower/> <#if column_has_next>,</#if>
	        </#list>
        WHERE 
        	<#list table.compositeIdColumns as column>
	        ${column.sqlName} = <@mapperEl column.columnNameLower/> <#if column_has_next>,</#if>
	        </#list>	        
    ]]>
	</update>

    <delete id="<@namespace/>delete">
    <![CDATA[
        DELETE FROM ${table.sqlName} WHERE
        <#list table.compositeIdColumns as column>
        ${column.sqlName} = <@mapperEl 'id'/> <#if column_has_next>,</#if>
		</#list>
    ]]>
    </delete>
    
	<delete id="deleteIds">
	<![CDATA[
		DELETE FROM ${table.sqlName} WHERE
        <#list table.compositeIdColumns as column>
        ${column.sqlName}
		</#list> in 
	]]>
	<#noparse> 
		<foreach collection="array" item="ids" open="(" separator="," close=")">#{ids}</foreach>
	</#noparse>
	</delete>
    
    <select id="<@namespace/>getById" resultMap="${basepackage}.${className}.RM">
		SELECT <include refid="<@namespace/>columns" />
	    <![CDATA[
		    FROM ${table.sqlName} 
	        WHERE 
				<#list table.compositeIdColumns as column>
		        ${column.sqlName} = <@mapperEl 'id'/> <#if column_has_next>,</#if>
		        </#list>    
	    ]]>
	</select>
		
    <select id="<@namespace/>count" resultType="long">
        SELECT count(*) FROM ${table.sqlName} 
		<include refid="where"/>
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="<@namespace/>findPage" resultMap="${basepackage}.${className}.RM">
    	SELECT <include refid="<@namespace/>columns" />
	    FROM ${table.sqlName}
		<include refid="where"/>
		<if test="@${utilpackage}.Ognl@isNotEmpty(sortColumns)">
			ORDER BY <@jspEl 'sortColumns'/>
		</if>
    </select>
	
	<select id="<@namespace/>findAll" resultMap="${basepackage}.${className}.RM">
		SELECT <include refid="<@namespace/>columns" />
	    <![CDATA[
		    FROM ${table.sqlName} 
	    ]]>
	    <if test="@${utilpackage}.Ognl@isNotEmpty(sortColumns)">
			ORDER BY <@jspEl 'sortColumns'/>
		</if>
	</select>
	
	<select id="<@namespace/>find" resultMap="${basepackage}.${className}.RM">
		SELECT <include refid="<@namespace/>columns" />
	    <![CDATA[
		    FROM ${table.sqlName} 
	    ]]>
	    <include refid="where"/>
	    <if test="@${utilpackage}.Ognl@isNotEmpty(sortColumns)">
			ORDER BY <@jspEl 'sortColumns'/>
		</if>
	</select>

    <#list table.columns as column>
    <#if column.unique && !column.pk>
    <select id="<@namespace/>getBy${column.columnName}" resultMap="${basepackage}.${className}.RM" parameterType="${column.javaType}">
	    SELECT <include refid="<@namespace/>columns"/>
	    <![CDATA[
	        FROM ${table.sqlName} where ${column.sqlName} = <@mapperEl column.columnNameLower/>
	    ]]>
    </select>
    </#if>
	</#list>
	
	<#list table.columns as column>
    <#if column.unique && !column.pk>
	<delete id="<@namespace/>deleteBy${column.columnName}" parameterType="${column.javaType}">
		DELETE
		<![CDATA[
		    ${table.sqlName} where ${column.sqlName} = <@mapperEl column.columnNameLower/>
		]]>
	</delete>
	</#if>
	</#list>

</mapper>